" \"", formVersion, "\"",
" \"", base64RsaPublicKey, "\"")
return(system(z, intern = T))
}
# Conversion d'un fichier instance XML en dataframe
#' Title
#'
#' @param instanceFilePath
#' @param repeatedNodePaths
#' @NoRd
makeInstanceDataFrame <- function(instanceFilePath, repeatedNodePaths = ""){
xml <- xmlTreeParse(instanceFilePath, useInternalNodes = T, encoding = "UTF-8")
numberAllRepeatedNodes(xml, repeatedNodePaths)
d <- makeDataFrame(xmlToList(xml))
return(d)
}
# Agrégation des données de plusieurs fichiers instance XML
#' Title
#'
#' @param instanceFilePaths
#' @param repeatedNodePaths
#' @NoRd
mergeInstanceData <- function(instanceFilePaths, repeatedNodePaths = ""){
dt <- lapply(instanceFilePaths, makeInstanceDataFrame, repeatedNodePaths)
dt <- Reduce(bind_rows, dt)
dt <- dt[,!grepl(x = names(dt), "^\\.attrs")]
return(dt)
}
directory <- file.path(tempdir(), "test_form")
formInfo <- setupFormDirectory(xFormId = 588520, formDirectory = directory, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
library(jsonlite)
directory <- file.path(tempdir(), "test_form")
formInfo <- setupFormDirectory(xFormId = 588520, formDirectory = directory, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
csvMoldFilePath <- file.path(directory, "mold/form_mold.csv")
csvMold <- read.csv(csvMoldFilePath)
View(csvMold)
instanceRegistry <- getInstanceRegistry(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
View(instanceRegistry)
instanceRegistry <- getInstanceRegistry(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
getEncryptedInstances(instanceIds = instanceRegistry$uuid,
encryptedFileUrls = instanceRegistry$attachments_download_url,
writeToPath = file.path(directory, "instances/encrypted"))
#' Retrieve encrypted instance files of a form
#'
#' @param instanceIds
#' @param encryptedFileUrls
#' @param writeToPath
#' @param BASE_DOWNLOAD_URL
#'
#' @return
#' @import httr
#' @export
#'
#' @examples
getEncryptedInstances <- function(instanceIds, encryptedFileUrls, writeToPath, BASE_DOWNLOAD_URL = "https://api.ona.io"){
encryptedFilePaths <- c()
if(!is.null(encryptedFileUrls)){
if(dir.exists(writeToPath)){
# Check missing urls
if(sum(is.na(encryptedFileUrls)) > 0){
warning("The following instances lack a download url, please check encryption:")
print(instanceIds[is.na(encryptedFileUrls)])
}
# Get files and write to directory
imax <- length(encryptedFileUrls)
for(i in seq_along(encryptedFileUrls)){
url <- encryptedFileUrls[[i]]
uuid <- instanceIds[[i]]
success <- F
messageLead <- paste0(sprintf(paste0("%0",nchar(imax),"d"), i), "/", imax)
if(!is.na(url) & !is.na(uuid)){
filename <- file.path(writeToPath, paste0(uuid, ".xml.enc"))
if(!file.exists(filename)){
d <- GET(paste0(BASE_DOWNLOAD_URL, url))
writeBin(content(d, "raw"), filename)
if(file.exists(filename)) {
message(paste0(messageLead, " - ", uuid, " instance file download success"))
success <- T
}
}
else{
message(paste0(messageLead, " - ", uuid, " instance file already exists"))
success <- T
}
}
if(!success)  message(paste0(lead, " - ", uuid, " instance file download failure"))
}
# Check that all files have been downloaded
downloadedIds <- sub(x = dir(writeToPath), pattern = "^([a-z0-9\\-]+)\\.xml\\.enc$","\\1")
missingIds <- setdiff(instanceIds,downloadedIds)
if(length(missingIds) > 0){
message("The following instances were not downloaded:")
print(missingIds)
}
else {
message("All instances were downloaded sucessfully")
}
}
else {
warning("The specified directory does not exist.")
}
}
else {
message("Form is empty")
}
}
instanceRegistry <- getInstanceRegistry(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
getEncryptedInstances(instanceIds = instanceRegistry$uuid,
encryptedFileUrls = instanceRegistry$attachments_download_url,
writeToPath = file.path(directory, "instances/encrypted"))
instanceRegistry$attachments_download_url
is.na(instanceRegistry$attachments_download_url)
"NA"
is.na("NA")
is.na("<NA>")
is.na(NA_character_)
#' Retrieve encrypted instance files of a form
#'
#' @param instanceRegistry
#' @param writeToPath
#' @param baseDownloadUrl
#'
#' @return
#' @import httr
#' @export
#'
#' @examples
getEncryptedInstances <- function(instanceRegistry, writeToPath, baseDownloadUrl = "https://api.ona.io"){
if(!is.null(instanceRegistry)){
if(dir.exists(writeToPath)){
# Check missing urls
if(sum(instanceRegistry$attachments_download_url) > 0){
warning("The following instances lack a download url, please check encryption:")
print(instanceRegistry[which(is.na(instanceRegistry$attachments_download_url)),]$uuid)
}
# Get files and write to directory
instanceRegistry$encrypted_file_path <- NA_character_
imax <- nrow(instanceRegistry)
for(i in 1:imax){
url <- instanceRegistry[i,]$attachments_download_url
uuid <- instanceRegistry[i,]$uuid
filename <- file.path(writeToPath, paste0(uuid, ".xml.enc"))
success <- F
messageLead <- paste0(sprintf(paste0("%0",nchar(imax),"d"), i), "/", imax)
if(!is.na(url) & !is.na(uuid)){
if(!file.exists(filename)){
d <- GET(paste0(baseDownloadUrl, url))
writeBin(content(d, "raw"), filename)
if(file.exists(filename)) {
message(paste0(messageLead, " - ", uuid, " instance file download success"))
success <- T
}
}
else{
message(paste0(messageLead, " - ", uuid, " instance file already exists"))
success <- T
}
}
if(success){
instanceRegistry[i,]$encrypted_file_path <- filename
}
else {
message(paste0(lead, " - ", uuid, " instance file download failure"))
}
}
# Check that all files have been downloaded
downloadedIds <- sub(x = dir(writeToPath), pattern = "^([a-z0-9\\-]+)\\.xml\\.enc$","\\1")
missingIds <- setdiff(instanceRegistry$uuid, downloadedIds)
if(length(missingIds) > 0){
message("The following instances were not downloaded:")
print(missingIds)
}
else {
message("All instances were downloaded sucessfully")
}
}
else {
warning("The specified directory does not exist.")
}
}
else {
message("Form is empty")
}
return(instanceRegistry)
}
instanceRegistry <- getInstanceRegistry(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
instanceRegistry <- getEncryptedInstances(instanceRegistry, writeToPath = file.path(directory, "instances/encrypted"))
#' Retrieve encrypted instance files of a form
#'
#' @param instanceRegistry
#' @param writeToPath
#' @param baseDownloadUrl
#'
#' @return
#' @import httr
#' @export
#'
#' @examples
getEncryptedInstances <- function(instanceRegistry, writeToPath, baseDownloadUrl = "https://api.ona.io"){
if(!is.null(instanceRegistry)){
if(dir.exists(writeToPath)){
# Check missing urls
if(sum(is.na(instanceRegistry$attachments_download_url)) > 0){
warning("The following instances lack a download url, please check encryption:")
print(instanceRegistry[which(is.na(instanceRegistry$attachments_download_url)),]$uuid)
}
# Get files and write to directory
instanceRegistry$encrypted_file_path <- NA_character_
imax <- nrow(instanceRegistry)
for(i in 1:imax){
url <- instanceRegistry[i,]$attachments_download_url
uuid <- instanceRegistry[i,]$uuid
filename <- file.path(writeToPath, paste0(uuid, ".xml.enc"))
success <- F
messageLead <- paste0(sprintf(paste0("%0",nchar(imax),"d"), i), "/", imax)
if(!is.na(url) & !is.na(uuid)){
if(!file.exists(filename)){
d <- GET(paste0(baseDownloadUrl, url))
writeBin(content(d, "raw"), filename)
if(file.exists(filename)) {
message(paste0(messageLead, " - ", uuid, " instance file download success"))
success <- T
}
}
else{
message(paste0(messageLead, " - ", uuid, " instance file already exists"))
success <- T
}
}
if(success){
instanceRegistry[i,]$encrypted_file_path <- filename
}
else {
message(paste0(lead, " - ", uuid, " instance file download failure"))
}
}
# Check that all files have been downloaded
downloadedIds <- sub(x = dir(writeToPath), pattern = "^([a-z0-9\\-]+)\\.xml\\.enc$","\\1")
missingIds <- setdiff(instanceRegistry$uuid, downloadedIds)
if(length(missingIds) > 0){
message("The following instances were not downloaded:")
print(missingIds)
}
else {
message("All instances were downloaded sucessfully")
}
}
else {
warning("The specified directory does not exist.")
}
}
else {
message("Form is empty")
}
return(instanceRegistry)
}
instanceRegistry <- getEncryptedInstances(instanceRegistry, writeToPath = file.path(directory, "instances/encrypted"))
View(instanceRegistry)
openssl::read_cert("inst/utils/certificate.pem")
privateKey <- openssl:: base64_encode(openssl::read_key(file = "inst/utils/certificate.pem"))
#' Decrypt encrypted instance files
#'
#' @param instanceRegistry
#' @param privateRSAKey
#' @param writeToPath
#'
#' @return
#' @importFrom stringr str_detect
#' @export
#'
#' @examples
decryptInstances <- function(instanceRegistry, privateRSAKey, writeToPath) {
if(dir.exists(writeToPath)){
imax <- nrow(instanceRegistry)
for(i in 1:imax){
uuid <- instanceRegistry[i,]$uuid
messageLead <- paste0(sprintf(paste0("%0",nchar(imax),"d"), i), "/", imax)
if(!is.na(uuid)){
encFilePath <- instanceRegistry[i,]$encrypted_file_path
if(file.exists(encFilePath)){
instanceId <- paste0("uuid:", uuid)
instanceKey <- instanceRegistry[i,]$base64EncryptedKey
xml <- decryptInstanceFile(encFilePath, instanceId, instanceKey, privateRSAKey)
if(str_detect(xml, "^<\\?xml")){
decFilePath <- paste0(writeToPath, uuid, ".xml")
write(xml, decFilePath)
if(file.exists(decFilePath)){
message(paste0(messageLead, " - ", uuid, " instance file decryption success"))
}
}
else{
message(paste0(messageLead, " - ", uuid, " instance file decryption failure"))
}
}
else {
message(paste0(messageLead, " - ", uuid, " encrypted instance file not found"))
}
}
}
}
else {
warning("The specified directory does not exist.")
}
return(instanceRegistry)
}
#' Decrypt encrypted instance files
#'
#' @param instanceRegistry
#' @param privateRSAKey
#' @param writeToPath
#'
#' @return
#' @importFrom stringr str_detect
#' @export
#'
#' @examples
decryptInstances <- function(instanceRegistry, privateRSAKey, writeToPath) {
if(dir.exists(writeToPath)){
instanceRegistry$decrypted_file_path <- NA_character_
imax <- nrow(instanceRegistry)
for(i in 1:imax){
uuid <- instanceRegistry[i,]$uuid
messageLead <- paste0(sprintf(paste0("%0",nchar(imax),"d"), i), "/", imax)
if(!is.na(uuid)){
encFilePath <- instanceRegistry[i,]$encrypted_file_path
if(file.exists(encFilePath)){
instanceId <- paste0("uuid:", uuid)
instanceKey <- instanceRegistry[i,]$base64EncryptedKey
xml <- decryptInstanceFile(encFilePath, instanceId, instanceKey, privateRSAKey)
if(str_detect(xml, "^<\\?xml")){
decFilePath <- paste0(writeToPath, uuid, ".xml")
write(xml, decFilePath)
if(file.exists(decFilePath)){
message(paste0(messageLead, " - ", uuid, " instance file decryption success"))
instanceRegistry[i,]$decrypted_file_path <- decFilePath
}
}
else{
message(paste0(messageLead, " - ", uuid, " instance file decryption failure"))
}
}
else {
message(paste0(messageLead, " - ", uuid, " encrypted instance file not found"))
}
}
}
}
else {
warning("The specified directory does not exist.")
}
return(instanceRegistry)
}
instanceRegistry <- decryptInstances(instanceRegistry, privateKey, writeToPath = file.path(directory, "instances/decrypted"))
library(stringr)
# Fonction de base de connexion à l'API de ONA.io
#' Title
#'
#' @param url
#' @param token
#' @param baseUrl
#' @NoRd
serverConnect <- function(url, token, baseUrl){
return(GET(paste0(baseUrl, url), add_headers(Authorization = paste0("Token ", token))))
}
#' Title
#'
#' @param x
#' @NoRd
makeDataFrame <- function(x){
x <- unlist(x, recursive = T, use.names = T)
x <- data.frame(t(x),stringsAsFactors = F)
return(x)
}
#' Title
#'
#' @param instanceFilePath
#' @param instanceId
#' @param base64EncryptedSymmetricKey
#' @param base64RsaPrivateKey
#' @NoRd
decryptInstanceFile <-  function(instanceFilePath, instanceId, base64EncryptedSymmetricKey, base64RsaPrivateKey){
z <- paste0("java -jar ", "inst/java/malakit_cipher.jar", " decipher",
" \"", instanceFilePath, "\"",
" \"", base64EncryptedSymmetricKey, "\"",
" \"", instanceId,"\"",
" \"", base64RsaPrivateKey, "\"")
return(system(z, intern = T))
}
#' Title
#'
#' @param instanceFilePath
#' @param instanceId
#' @param idString
#' @param formVersion
#' @param base64RsaPublicKey
#' @NoRd
encryptInstanceFile <- function(instanceFilePath, instanceId, idString, formVersion, base64RsaPublicKey){
z <- paste0("java -jar ", "inst/java/malakit_cipher.jar", " cipher",
" \"", instanceFilePath, "\"",
" \"", instanceId, "\"",
" \"", idString, "\"",
" \"", formVersion, "\"",
" \"", base64RsaPublicKey, "\"")
return(system(z, intern = T))
}
# Conversion d'un fichier instance XML en dataframe
#' Title
#'
#' @param instanceFilePath
#' @param repeatedNodePaths
#' @NoRd
makeInstanceDataFrame <- function(instanceFilePath, repeatedNodePaths = ""){
xml <- xmlTreeParse(instanceFilePath, useInternalNodes = T, encoding = "UTF-8")
numberAllRepeatedNodes(xml, repeatedNodePaths)
d <- makeDataFrame(xmlToList(xml))
return(d)
}
# Agrégation des données de plusieurs fichiers instance XML
#' Title
#'
#' @param instanceFilePaths
#' @param repeatedNodePaths
#' @NoRd
mergeInstanceData <- function(instanceFilePaths, repeatedNodePaths = ""){
dt <- lapply(instanceFilePaths, makeInstanceDataFrame, repeatedNodePaths)
dt <- Reduce(bind_rows, dt)
dt <- dt[,!grepl(x = names(dt), "^\\.attrs")]
return(dt)
}
instanceRegistry <- decryptInstances(instanceRegistry, privateKey, writeToPath = file.path(directory, "instances/decrypted"))
View(instanceRegistry)
#' Aggregate decrypted instances into a dataframe
#'
#' @param formInfo Form info file generated by setupFormDirectory function
#' @param oldData Optional, dataframe with existing data to be merged with new instances
#' @param instanceRegistry
#'
#' @return
#' @importFrom stringr str_replace
#' @importFrom utils read.csv
#' @importFrom rlang .data
#' @import dplyr
#' @export
#'
#' @examples
aggregateInstances <- function(instanceRegistry, formInfo, oldData = NULL) {
dt <- data.frame()
instanceFilePaths <- instanceRegistry$decrypted_file_path
if(!is.null(oldData)) {
oldInstanceFilePaths <- paste0(decDataPath, "/", str_replace(oldData$instanceID,"uuid:",""),".xml")
instanceFilePaths <- setdiff(instanceFilePaths, oldInstanceFilePaths)
}
if (length(instanceFilePaths) > 0) {
# Agrégation des instances
dt <- mergeInstanceData(instanceFilePaths, formInfo$repeatedNodePaths)
# Vérification de l'adéquation au schéma
mold <- read.csv(formInfo$csvMoldFilePath)
if(checkDataStructure(dt, mold)){
# Moulage des données dans le schéma
baseDt <- data.frame(t(rep("", nrow(mold))))
names(baseDt) <- mold$path
baseDt <- baseDt[-1,]
dt <- bind_rows(baseDt,dt)
names(dt) <- mold$name
if(!is.null(oldData)){
if(checkDataStructure(oldData, mold)){
dt <- bind_rows(oldData, dt)
}
else{
warning("Old data do not match the mold")
}
}
dt <- dt %>% arrange(.data$start)
}
else{
warning("Decrypted data do not match the mold")
}
}
return(dt)
}
formInfo
dt <- aggregateInstances(instanceRegistry, formInfo)
library(dplyr)
dt <- aggregateInstances(instanceRegistry, formInfo)
View(dt)
library(malakitr)
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Rtools", "C:\\Rtools\\mingw64\\bin", "C:\\Rtools\\usr\\bin", sep = ";"))
directory <- file.path(tempdir(), "test_form")
formInfo <- setupFormDirectory(xFormId = 588520, formDirectory = directory, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
xFormFilePath <- file.path(directory, "mold/xForm.xml")
xForm <- XML::xmlTreeParse(xFormFilePath, useInternalNodes = T, encoding = "UTF-8")
xmlMoldFilePath <- file.path(directory, "mold/form_mold.xml")
xmlMold <- XML::xmlTreeParse(xmlMoldFilePath, useInternalNodes = T, encoding = "UTF-8")
csvMoldFilePath <- file.path(directory, "mold/form_mold.csv")
csvMold <- read.csv(csvMoldFilePath)
## Get instances
instanceRegistry <- getInstanceRegistry(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5")
instanceRegistry <- getEncryptedInstances(instanceRegistry, writeToPath = file.path(directory, "instances/encrypted"))
privateKey <- openssl:: base64_encode(openssl::read_key(file = "inst/utils/certificate.pem"))
instanceRegistry <- decryptInstances(instanceRegistry, privateKey, writeToPath = file.path(directory, "instances/decrypted"))
dt <- aggregateInstances(instanceRegistry, formInfo)
View(dt)
library(malakitr)
privateKey <- openssl:: base64_encode(openssl::read_key(file = "inst/utils/certificate.pem"))
dt <- getFormData(xFormId = 588520, token = "42acc1bfe58f9c924bdedc680ab2011622f2bcb5", privateKey)
usethis::use_build_ignore("R/get_form_data.R")
usethis::use_build_ignore("sandbox")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Rtools", "C:\\Rtools\\mingw64\\bin", "C:\\Rtools\\usr\\bin", sep = ";"))
install.packages("qpdf")
library(malakitr)
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\\Rtools", "C:\\Rtools\\mingw64\\bin", "C:\\Rtools\\usr\\bin", sep = ";"))
file.exists("~/.ssh/id_rsa.pub")
